1. NodeJS - https://nodejs.org/en/

2. npm install webpack webpack-dev-server typescript -g

											1.1 что такое ангуляр
											
реактивные динамические приложения single page application

весь код уже лежит локально в браузере весь контент генирируется динамически уже джаваскриптом
отличия - не шлем отдельные запросы на сервер

вторую версию - написан на другом языке с использованием других паттернов

(установка нода, вебпака, гитбаша, вебшторма)

											1.2 установка ангуляр

нет обычных скриптов все через менеджер нпм

2 способа 
	1 - детальный уровень, 
	2 - установить специальный пакет, который отвечает за остановку все ангуляра и разворачинвание проекта на нем 

angular cli основан на вебпаке
нужно еще и установить вебпак глобально 

он с помощью пакетного менеджера нпм все исходники все библиотеки необходиміе для работы самого ангуляра

ng new projectName
package.json - вся информация о пакетах ангуляра

											1.3 структура проекта
											
angular.json
	настройка ангуляр cli, настройка инструмента позволяющий генерировать данный проект и код в нем
.editorconfig
	для соблюдения общей стилистики кода в разных идеешках и операционных системах (кодировка, табуляции, пробелов)
.gitignore
	системе контроля версии гит, какие файлы и папки не нужно подшружать в гит (не нужно нод модулес)
karma.conf.js
	файл-инструмент позволяющий настраивать и тестировать приложение - сервер для запуска юнит тестов в различных браузерах
npm-debug.log
	(обибки пакетного менеджера)
package.json
	необходимости, зависимости, пакеты нужные для проекта и скриптты нужные для запуски более удобным способом (npm run start)
protractor.config.js и папка e2e (для тестирования)
	файл для настройки системы протактор системы енд ту енд тестирования
readme.md
	файлы позволяющие описывать для гита в формате марк даун .md
tsconfig.json
	файл для компиляции typescript-a в данном случае es2015
tsconfig.app.json
	за компиляцию тайпскрипта имеет зависимость с tsconfig.json
tsconfig.spec.json
	конфигуратор тайпскрипта предназначенный для тестирования
tslint.json
	файл-конфигурации для тайпскрипта с правилами форматирования и стайла для использования на проекте для ведения в одном стиле
	
папка nodu_modules 
	все пакеты необходимые для функционирования нашего приложения и ангуляра, весь исходный код
	
папка src (source) 
	ЗДЕСЬ НАХОДИТСЯ ВЕСЬ ИСХОДНЫЙ КОД НАШЕГО ПРИЛОЖЕНИЯ вся разработка проиходит здесь в данной папке
		favicon.ico
			иконка сайта приложения
		index.html
			одна единственная страница для всего проекта весь функционал происходит здесь, все скрипты и и стили будут подключены вебпаком 
		main.ts (typescript)
			запускает все наше придложение и можно выставлять режим разработки там же связь с папкой ENVIROMENTS 
		polyfills.ts
			подключаются все необходимые библиотеки, которые будут использоваться во всех файлах на проете
		styles.css
			общий файл стилей
		test.ts
			для тестирования

папка assets 
	для хранения статических файлов 
папка app
	весь исходный код нашего приложения для редактирвоания написания
		app.component.css
			файл стилей
		app.component.html
			шаблон 
		app.component.spec.ts
			тест юнит тесты компонета
		app.component.ts
			сам файл компонента
		app.modules.ts 
		
											2.4 структура проекта
											
		в index.html есть селектор app-root - ангуляр ищет этот селектор и вставляет наш компонент прописанный в файле app.components 
		
		app.module.ts - модуль отвечающий за все наше приложение, импортируется с помощью синтаксиса ес6 (он же тайпскрипт) и является частью (AppComponent) поля declarations
			в нем есть @NgModule в котором есть компонент и он бутстрапится (запускается)
		
		в файле main.ts запускается app.module
		
		app.component декларируется и бутстрапится в -> app.module запускается в -> main.ts
		
		в файле app.component находится компонент с шаблоном, который будет добавлять в селектор app-root
		
		@ - декоратор, особенность ангуляра 2 и тайпскрипта
		
		свойства, которые мы передаем в данный декоратор, определяют поведение нашего компонента
		
		сперва создается папка с требуемыми компонентами в папке для разработки арр например папка myOwn после создается файл myOwn.component.ts в нем вызыывается компонент из ангуляр\кор декларируется селектор который будем использовать в app.component.html и импортируемые хтмл чанки и стили для них 
		(которые мы тоже создаем соответственно синтаксиса в нашей папке)
		после экспортируем класс MyOwnComponents который мы создаем в файле app.modules.ts
		прописываем созданный селектор в app.component.html
		
		короткий путь создания комонентов с помощью cli 
		в консоле в папке app проекта нужно прописить 
		ng generate (g) component (c) folderComponentName
		и он сам создает компоненты и прописывает в module.ts
		
		остается лишь прописать селектор в app.component.html
		
											2.5 шаблоны и стили компонента

		создаем папку компонентов без юнит теста ng g c cars --spec=false
		(Option "spec" is deprecated: Use "skipTests" instead.)
		
		(лично замечание: если выше существующего и задикларированного селектора будет несуществующий, то все приложение выдаст на странице ничего)
		
		templateUrl для ссылки на файл
		template для кода прям внутри компонетра в таких ковычках ``
		stylesUrls для ссылки на стили
		styles [`h1 {color: aqua;}`]
		
											2.6 селекторы в компонентах
		
		в appName.component.ts поддерживаются еще 2 вариант работы с селекторами и добавления его на страницу
		основной через само названия селектора (тега хтмл) selector: 'app-appName'
		второй через атрибут <div app-appName=""></div> и app.module.ts selector: '[app-appName]'
		третий через класс <div class="app-appName"> и в app.module.ts selector: '[.app-appName]'
		
		id - не используется, т.к. по валидности хтмл он должен быть один на проекте и это может вызывать ошибки в понимании и синтаксисе
		
											2.7 связка компонента и шаблона [ ]
											
		установка bootstrap и подключение стилей в главный файл конфигурации angular.json
		в строке styles: "указывается путь до стилей бутстрап который находится в node_modules
		
		в ангуляре предусмотрел дата байдинг на различные аттрибуты
		
		если мы кладем атрибут в квадратные скобочки в appName.component.html 
		то значение данного [аттрибута] будет описан на языке джаваскрт абстагированный от хтмл
		тоже самое можно сделать через фигурные скобочки {{ }}
		
		{{  }} - скобочки ангуляр для шаблонизации
		
		[attribute] - описывая атрибут селектора в квадратные скобочки, мы говорим ангуляру, что за ним нужно следить и тратим ресурсы
		
		constructor() - функция выполняемая в классе при его инициализации	
		
		применения изменяемой логики в компоненте, дабы она отобразилась в шаблоне (one way binding)
		
											2.8 связка шаблона и компонента ( )
											
		теперь изменения в шаблоне, а изменения будут отлавливаться в компоненте тайпскрипт
		
		в обычных случаях обрабатывалось при нажатии кнопки при накладывании события onlclick=""	
		(click)="function" - ангуляра синтаксис (навешиватель событий при передачи изменений с шаблона к компонент со скриптом
		
		событие input для отображения в реальном времени 
		
		1 - ...в тайпскрипте необходимо указывать конструкцию <HTMLInputEvent> (... as HTMLInputElement)при использовании EventTarget
		2 - упрощение данного интаксиса возможно через символ #myInput дав имя элементу как референс элеммента в appName.component
		3 - keyup.enter
		
											2.9 связка компонента и шаблона	[( )] ngModel
		
		вызов параметра популярного в ангуляре [(ngModel)]
		не будет рабодать модуль, если его нет в файле app.module.ts в строке imports: с названием FormsModule
		(в 8-ой версии у меня по уполчанию не был включен)
    еще главное не забывать делать импорт с нод_модульс из ядра ангуляра

											2.10 директивы ngif else

    можно выбирать компоненты, выводить каждый селектроры с помощью мнощественных *ngif в них
    начиная с 4-ого? возможно еще и использоваться *ngif else

    ng-template селектор и параметр # имени ангуляра для селектора

